Plotting data with transparency

****************************************************
**Matplotlib
****************************************************
Polycollection works well and is almost as fast as holoviews, but has
trouble with alpha at polygon edges, even when one is careful to remove edges.
If the polygons have an alpha assiged, then key issue from internet I believe is:
"The problem is that the squares overlap a tiny bit, and they are
somewhat transparent (you're setting their alpha values != 1) -- so at
the overlaps, they're less transparent than they should be, and it
looks like a line."

Fix is create (1) image without alpha, (2) image of an alpha mask and (3) background image
These can all be created with a single plt,ax pair, by calling plt.savefig()
as we add different elements.  Then as a postprocessing step:
remove alpha channel from mask (seems to be needed for composite step to work),
and the composit images:

magick mask.png.png   -flatten tempmask.png
magick composite data.png bg.png tempmask.png   new.png


One issue:
Just like with holowviews, a lat/lon image printed on a different
projection with imshow seems to be at a fixed, low resolution.
Resolution is comparable to NE120.  (1000 pts on equator).  
So for resolutions up to NE120 use imshow ( and use 5400x2700 image).
For resolutions up to NE512, interpolate low res backgroudn image (5400x2700).
For NE1024, interpoalte high res background image.


TODO: turn this on for non-lat/lon projectionis?
      verify not needed for lat/lon projections
      verify not needed for NE30 images (backgroudn will be higher resolution than NE30 data?)




****************************************************
**Holoviews:
****************************************************
Works well if we convert SCRIP polygons to geodataframe via Dallin's
polygon_to_geodataframe() routine.  Slightly faster plotting that matplotlib.
Works well setting alpha in the color map, and then composing two
images.  Rasterization seems to ignore my attempts to set alpha in
each polygon.  Setting alpha for each polygons seems to work if they are not
rasterized, but is ignored by rasterization.  

Two issues:

-At some resolutions (8K for latlon, 2K for ortho), there is a lot of
speckling with black boxes.  This seems to be rasterized cells that are skipped
during the rasterization or otherwise dont have any color data.

-The lat/lon background image if rendered as-is, will be blocky.  Seems to be
that composing lat/lon RGB image with projected polygon data, when the
polygon data is at high res, RGB image's rasterization seems to
maximize at some lower resolution (maybe HV's default 400x400), resulting in blocky
coastlines (coarser then our NE1024 data)

Resolution will match data if it is first projected with gv.project() But for the
highres image, this takes about 17min.  (150s for low-res).  We could precompute
and project all the background images and then save the python data via pickle.




